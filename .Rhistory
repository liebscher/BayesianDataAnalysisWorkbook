scale_x_discrete(labels = c("literal" = "Literal", "battle" = "Battle", "journey" = "Journey")) +
scale_y_continuous(labels = scales::dollar) +
scale_color_brewer(palette = "Dark2")
# ggsave("3way-int.png", g, width = 8)
g
g = trials %>%
filter(gender %in% c("M", "F")) %>%
mutate(cond_sex = recode(cond_sex,
"male" = "Male",
"female" = "Female")) %>%
# filter(cond_anymet) %>%
ggplot(aes(cond_metaphor, urgent, color = gender)) + itheme +
stat_summary(fun.data = mean_se, geom = "errorbar", position = position_dodge(width = 0.35), width = 0.2) +
stat_summary(fun.data = mean_se, geom = "point", shape = 5, position = position_dodge(width = 0.35)) +
labs(x = "Metaphor condition",
y = "Donation",
color = "Gender",
title = "Donation by metaphor, sex, and participent gender") +
facet_grid(~ cond_sex) +
# coord_cartesian(ylim = c(18, 30)) +
scale_x_discrete(labels = c("literal" = "Literal", "battle" = "Battle", "journey" = "Journey")) +
# scale_y_continuous(labels = scales::dollar) +
scale_color_brewer(palette = "Dark2")
# ggsave("3way-int.png", g, width = 8)
g
g = trials %>%
filter(gender %in% c("M", "F")) %>%
mutate(cond_sex = recode(cond_sex,
"male" = "Male",
"female" = "Female")) %>%
# filter(cond_anymet) %>%
ggplot(aes(cond_metaphor, sympathy, color = gender)) + itheme +
stat_summary(fun.data = mean_se, geom = "errorbar", position = position_dodge(width = 0.35), width = 0.2) +
stat_summary(fun.data = mean_se, geom = "point", shape = 5, position = position_dodge(width = 0.35)) +
labs(x = "Metaphor condition",
y = "Donation",
color = "Gender",
title = "Donation by metaphor, sex, and participent gender") +
facet_grid(~ cond_sex) +
# coord_cartesian(ylim = c(18, 30)) +
scale_x_discrete(labels = c("literal" = "Literal", "battle" = "Battle", "journey" = "Journey")) +
# scale_y_continuous(labels = scales::dollar) +
scale_color_brewer(palette = "Dark2")
# ggsave("3way-int.png", g, width = 8)
g
library(pwr)
r.sq = function(mod.base, mod.full) {
#' Calculate the R-squared value given two nested models
#'
#' The variance explained by a full model beyond that which is explained by the reduced model.
#' Technically, a difference in sum of squared residuals divided by the base model's sum of squared residuals
#' Adapted from Larsen & Marx (2018) pg. 566
return((sum(resid(mod.base)^2) - sum(resid(mod.full)^2)) / sum(resid(mod.base)^2))
}
f.sq = function(mod.null, mod.base, mod.full) {
#' Calculate the f-squared effect size from two R-squared values
#'
#' Adapted from Cohen (1988) pg. 409
R2.base = r.sq(mod.null, mod.base)
R2.full = r.sq(mod.null, mod.full)
return((R2.full - R2.base) / (1 - R2.full))
}
journey_mask = trials$cond_metaphor != "battle"
library(tidyverse) # mostly for ggplot2 and dplyr
library(jtools) # for pretty printing model summaries
library(gridExtra) # for combining plots
# library(sysfonts)
# library(showtext) # for custom fonts in presentation graphs
library(ggsignif)
library(glue)
trials <- read_csv("../experimental/data/data_clean_excluded.csv", col_types = cols()) %>%
# remove outliers in past_donations and age which lie greater than 3 SDs away
filter(past_donations < (mean(past_donations, na.rm = T) + 3*sd(past_donations, na.rm = T))) %>%
filter(age < (mean(age, na.rm = T) + 3*sd(age, na.rm = T))) %>%
filter(age >= 18) %>%
# set the levels of the factors variables and rescale age and past_donations
mutate(
cond_sex = factor(cond_sex, levels = c("male", "female")),
cond_metaphor = factor(cond_metaphor, levels = c("literal", "battle", "journey")),
cond_anymet = cond_metaphor %in% c("battle", "journey"),
urgent = as.integer(urgent),
sympathy = as.integer(sympathy),
self_cancer = factor(self_cancer, levels = c("N", "Y", "OO")),
ff_cancer = factor(ff_cancer, levels = c("N", "Y", "OO")),
gender = factor(gender, levels = c("M", "F", "NB", "OO")),
education = factor(education, levels = c("<HS", "HS", "A", "B", "M", "P", "D", "OO")),
socioeconomic = factor(socioeconomic, levels = c("<10k", "10-25k", "25-50k", "50-75k", "75-100k", "100-150k", ">150k", "OO")),
rt_trial_group = factor(rt_trial_group, levels = c("[1.9,23]", "(23,42.7]", "(42.7,69.3]", "(69.3,4.25e+03]")),
congruency = ifelse((gender == "M" & cond_sex == "male") | (gender == "F" & cond_sex == "female"),
"congruent",
"incongruent")
)
# fill in missing values for past_donation and age with their means
trials <- trials %>%
replace_na(list(past_donations = mean(trials$past_donations, na.rm = T))) %>%
replace_na(list(age = mean(trials$age, na.rm = T)))
trials <- trials %>%
mutate(
age.z = (age - mean(age)) / (2 * sd(age)),
past_donations.z = (past_donations - mean(past_donations)) / (2 * sd(past_donations))
)
base.formula <- formula( ~ cond_sex + self_cancer + ff_cancer + gender + education + socioeconomic + past_donations.z + age.z)
# pretty printing summary contingency tables
print_crosstabs <- function(tab) {
print(tab)
cat("\n")
print(round(prop.table(tab), 3))
}
pvalue_show_summary <- 0.1
compare_lm <- function (base, full, force_summary = F) {
a <- anova(base, full, test = "Chisq")
print(a)
print.noquote(paste("Chisq Stat: ", as.numeric(round(2*(logLik(full) - logLik(base)), 3))))
if (a["Pr(>Chi)"][[1]][2] < pvalue_show_summary | force_summary) {
cls <- attributes(full)$class
if (cls == c("lm") | cls == c("glm", "lm")) {
print(summ(full, confint = T, digits = 3))
} else {
print(summary(full))
}
}
}
# font_add("Avenir", "/System/Library/Fonts/Avenir.ttc")
# showtext_auto()
# Rmd interactive theme
itheme <- list(theme_minimal(), scale_color_brewer(palette = "Dark2"))
# Presentation theme
ptheme <- theme_minimal() + theme(
panel.background = element_rect(fill = "transparent", color = NA),
plot.background = element_rect(fill = "transparent", color = NA),
legend.key = element_blank(),
legend.background = element_rect(fill = "transparent", color = NA),
text = element_text(family = "Avenir")
)
pwidth = 6.5
pheight = 3
geom_errorbars <- list(
stat_summary(fun.data = mean_se, geom = "errorbar", position = position_dodge(width = 0.35), width = 0.2),
stat_summary(fun.data = mean_se, geom = "point", shape = 5, position = position_dodge(width = 0.35)))
journey_mask = trials$cond_metaphor != "battle"
model_journey_literal_base = lm(update(base.formula, donation ~ .), data = trials[journey_mask, ])
model_journey_literal_full = lm(update(base.formula, donation ~ . + cond_metaphor), data = trials[journey_mask, ])
compare_lm(model_journey_literal_base, model_journey_literal_full)
f.sq(
lm(update(base.formula, donation ~ 1), data = trials[journey_mask, ]),
model_journey_literal_base,
model_journey_literal_full
)
battle_mask = trials$cond_metaphor != "journey"
model_battle_literal_base = lm(update(base.formula, donation ~ .), data = trials[battle_mask, ])
model_battle_literal_full = lm(update(base.formula, donation ~ . + cond_metaphor), data = trials[battle_mask, ])
compare_lm(model_battle_literal_base, model_battle_literal_full)
f.sq(
lm(update(base.formula, donation ~ 1), data = trials[battle_mask, ]),
model_battle_literal_base,
model_battle_literal_full
)
literal_mask = trials$cond_metaphor != "literal"
model_battle_journey_base = lm(update(base.formula, donation ~ .), data = trials[literal_mask, ])
model_battle_journey_full = lm(update(base.formula, donation ~ . + cond_metaphor), data = trials[literal_mask, ])
compare_lm(model_battle_journey_base, model_battle_journey_full)
g = trials %>%
ggplot(aes(cond_metaphor, donation)) + ptheme +
stat_summary(fun.data = mean_se, geom = "errorbar", position = position_dodge(width = 0.35), width = 0.2) +
stat_summary(fun.data = mean_se, geom = "point", shape = 5, position = position_dodge(width = 0.35)) +
scale_x_discrete(labels = c("literal" = "Literal\n", "journey" = "Journey\n", "battle" = "Battle\n")) +
scale_y_continuous(labels = scales::dollar) +
coord_cartesian(ylim = c(22, 27)) +
labs(x = element_blank(), y = element_blank())
# geom_signif(comparisons = list(c("literal", "journey"), c("literal", "battle"), c("battle", "journey")),
#             y_position = c(26.6, 26, 25.4),
#             tip_length = 0.005,
#             textsize = 2.75,
#             annotations = c("list({\U03C7^2}(1) == 0.6, ~~ ns)",
#                             "list({\U03C7^2}(1) == 1.7, ~~ ns)",
#                             "list({\U03C7^2}(1) == 4.0, ~~ p < 0.05)"),
#             parse = T)
g
# ggsave("metaphor_donation0.png", g, width = pwidth/1.8, height = pheight, bg = "transparent")
x <- rnorm(100, 5, 2)
mean_sdl(x)
mean_se(x)
x <- rnorm(100, 5, 2)
Hmisc::smean.sd(x)
x <- rnorm(100, 5, 2)
Hmisc::smean.sd(x)
x <- rnorm(100, 5, 2)
Hmisc::smean.sd(x)
mean_sdl(x)
mean_sdl(x, mult=1)
mean_sdl(x, mult=1.96)
ggplot(trials, aes(cond_metaphor, donation)) +
geom_jitter()
ggplot(trials, aes(cond_metaphor, donation)) +
geom_jitter(width = 0.1)
ggplot(trials, aes(cond_metaphor, donation)) +
geom_jitter(width = 0.1, alpha = 0.1)
ggplot(trials, aes(cond_metaphor, donation)) +
geom_jitter(width = 0.1, alpha = 0.01)
ggplot(trials, aes(cond_metaphor, donation)) +
geom_jitter(width = 0.1, alpha = 0.05)
ggplot(trials, aes(cond_metaphor, donation)) +
geom_jitter(width = 0.1, alpha = 0.05, height = 0.1)
ggplot(trials, aes(cond_metaphor, donation)) +
geom_jitter(width = 0.1, alpha = 0.05, height = 1)
ggplot(trials, aes(cond_metaphor, donation)) +
geom_jitter(width = 0.05, alpha = 0.05, height = 1)
ggplot(trials, aes(cond_metaphor, donation)) +
theme_minimal() +
geom_jitter(width = 0.05, alpha = 0.05, height = 1)
ggplot(trials, aes(cond_metaphor, donation)) +
theme_minimal() +
geom_jitter(width = 0.05, alpha = 0.05, height = 1) +
stat_summary(fun.data = mean_sdl, geom = "errorbar")
ggplot(trials, aes(cond_metaphor, donation)) +
theme_minimal() +
geom_jitter(width = 0.05, alpha = 0.05, height = 1) +
stat_summary(fun.data = mean_se, geom = "errorbar")
ggplot(trials, aes(cond_metaphor, donation)) +
theme_minimal() +
geom_jitter(width = 0.05, alpha = 0.05, height = 1) +
stat_summary(fun.data = mean_sdl, geom = "errorbar")
ggplot(trials, aes(cond_metaphor, donation)) +
theme_minimal() +
geom_jitter(width = 0.05, alpha = 0.05, height = 1) +
stat_summary(fun.data = mean_sdl, fun.args = list(mult=1), geom = "errorbar")
ggplot(trials, aes(cond_metaphor, donation)) +
theme_minimal() +
geom_jitter(width = 0.05, alpha = 0.05, height = 1) +
stat_summary(fun.data = mean_sdl, fun.args = list(mult=1.96), geom = "errorbar")
ggplot(trials, aes(cond_metaphor, age)) +
theme_minimal() +
geom_jitter(width = 0.05, alpha = 0.05, height = 1) +
stat_summary(fun.data = mean_sdl, geom = "errorbar")
ggplot(trials, aes(cond_metaphor, past_donations)) +
theme_minimal() +
geom_jitter(width = 0.05, alpha = 0.05, height = 1) +
stat_summary(fun.data = mean_sdl, geom = "errorbar")
ggplot(trials, aes(cond_metaphor, donation)) +
theme_minimal() +
geom_jitter(width = 0.05, alpha = 0.05, height = 1) +
stat_summary(fun.data = mean_sdl, geom = "errorbar")
ggplot(trials, aes(cond_metaphor, donation)) +
theme_minimal() +
geom_jitter(width = 0.05, alpha = 0.05, height = 1) +
stat_summary(fun.data = mean_sdl, geom = "errorbar", width = 0.1)
nrow(trials)
trials <- read_csv("../experimental/data/data_clean_test.csv", col_types = cols()) %>%
# remove outliers in past_donations and age which lie greater than 3 SDs away
filter(past_donations < (mean(past_donations, na.rm = T) + 3*sd(past_donations, na.rm = T))) %>%
filter(age < (mean(age, na.rm = T) + 3*sd(age, na.rm = T))) %>%
filter(age >= 18) %>%
# set the levels of the factors variables and rescale age and past_donations
mutate(
cond_sex = factor(cond_sex, levels = c("male", "female")),
cond_metaphor = factor(cond_metaphor, levels = c("literal", "battle", "journey")),
cond_anymet = cond_metaphor %in% c("battle", "journey"),
urgent = as.integer(urgent),
sympathy = as.integer(sympathy),
self_cancer = factor(self_cancer, levels = c("N", "Y", "OO")),
ff_cancer = factor(ff_cancer, levels = c("N", "Y", "OO")),
gender = factor(gender, levels = c("M", "F", "NB", "OO")),
education = factor(education, levels = c("<HS", "HS", "A", "B", "M", "P", "D", "OO")),
socioeconomic = factor(socioeconomic, levels = c("<10k", "10-25k", "25-50k", "50-75k", "75-100k", "100-150k", ">150k", "OO")),
rt_trial_group = factor(rt_trial_group, levels = c("[1.9,23]", "(23,42.7]", "(42.7,69.3]", "(69.3,4.25e+03]")),
congruency = ifelse((gender == "M" & cond_sex == "male") | (gender == "F" & cond_sex == "female"),
"congruent",
"incongruent")
)
# fill in missing values for past_donation and age with their means
trials <- trials %>%
replace_na(list(past_donations = mean(trials$past_donations, na.rm = T))) %>%
replace_na(list(age = mean(trials$age, na.rm = T)))
trials <- trials %>%
mutate(
age.z = (age - mean(age)) / (2 * sd(age)),
past_donations.z = (past_donations - mean(past_donations)) / (2 * sd(past_donations))
)
nrow(trials)
trials <- read_csv("../experimental/data/data_clean_excluded.csv", col_types = cols()) %>%
# remove outliers in past_donations and age which lie greater than 3 SDs away
filter(past_donations < (mean(past_donations, na.rm = T) + 3*sd(past_donations, na.rm = T))) %>%
filter(age < (mean(age, na.rm = T) + 3*sd(age, na.rm = T))) %>%
filter(age >= 18) %>%
# set the levels of the factors variables and rescale age and past_donations
mutate(
cond_sex = factor(cond_sex, levels = c("male", "female")),
cond_metaphor = factor(cond_metaphor, levels = c("literal", "battle", "journey")),
cond_anymet = cond_metaphor %in% c("battle", "journey"),
urgent = as.integer(urgent),
sympathy = as.integer(sympathy),
self_cancer = factor(self_cancer, levels = c("N", "Y", "OO")),
ff_cancer = factor(ff_cancer, levels = c("N", "Y", "OO")),
gender = factor(gender, levels = c("M", "F", "NB", "OO")),
education = factor(education, levels = c("<HS", "HS", "A", "B", "M", "P", "D", "OO")),
socioeconomic = factor(socioeconomic, levels = c("<10k", "10-25k", "25-50k", "50-75k", "75-100k", "100-150k", ">150k", "OO")),
rt_trial_group = factor(rt_trial_group, levels = c("[1.9,23]", "(23,42.7]", "(42.7,69.3]", "(69.3,4.25e+03]")),
congruency = ifelse((gender == "M" & cond_sex == "male") | (gender == "F" & cond_sex == "female"),
"congruent",
"incongruent")
)
# fill in missing values for past_donation and age with their means
trials <- trials %>%
replace_na(list(past_donations = mean(trials$past_donations, na.rm = T))) %>%
replace_na(list(age = mean(trials$age, na.rm = T)))
trials <- trials %>%
mutate(
age.z = (age - mean(age)) / (2 * sd(age)),
past_donations.z = (past_donations - mean(past_donations)) / (2 * sd(past_donations))
)
nrow(trials)
knitr::opts_chunk$set(echo = TRUE)
trials <- read_csv("data/data_clean_test.csv", col_types = cols())
nrow(trials)
trials <- read_csv("data/data_clean_pre15.csv", col_types = cols())
nrow(trials)
trials <- read_csv("data/data_clean_pre15.csv", col_types = cols())
nrow(trials)
nStart <- nrow(trials)
glue("{format(nStart, big.mark=",")} participants to begin with")
pre_exclusion = nrow(trials)
trials = trials %>% filter(english == "Y")
print_exclusion_change("Non-Native English", nStart, pre_exclusion, nrow(trials))
library(tidyverse)
library(glue)
print_exclusion_change <- function(title, start, pre_exclusion, post_exclusion) {
removed <- pre_exclusion - post_exclusion
percent_change <- round(-100 * removed / pre_exclusion, 2)
percent_total_change <- round(100 * (post_exclusion - start) / start, 2)
print(glue_col("{red {title}: {removed} ({percent_change}%) just removed\tNow: {post_exclusion} ppts ({percent_total_change}% decrease)}"))
}
# bot check correct answers
CHECK1_ANS = 1
CHECK2_ANS = 2
# minimum amount of time required on the stimulus
MINIMUM_TRIAL_RT = 5000 # in Milliseconds
trials <- read_csv("data/data_clean_pre15.csv", col_types = cols())
nrow(trials)
nStart <- nrow(trials)
glue("{format(nStart, big.mark=",")} participants to begin with")
pre_exclusion = nrow(trials)
trials = trials %>% filter(english == "Y")
print_exclusion_change("Non-Native English", nStart, pre_exclusion, nrow(trials))
library(tidyverse)
library(glue)
print_exclusion_change <- function(title, start, pre_exclusion, post_exclusion) {
removed <- pre_exclusion - post_exclusion
percent_change <- round(-100 * removed / pre_exclusion, 2)
percent_total_change <- round(100 * (post_exclusion - start) / start, 2)
print(glue_col("{red {title}: {removed} ({percent_change}%) just removed\tNow: {post_exclusion} ppts ({percent_total_change}% decrease)}"))
}
# bot check correct answers
CHECK1_ANS = 1
CHECK2_ANS = 2
# minimum amount of time required on the stimulus
MINIMUM_TRIAL_RT = 5000 # in Milliseconds
trials <- read_csv("data/data_clean_pre15.csv", col_types = cols())
nrow(trials)
nStart <- nrow(trials)
glue("{format(nStart, big.mark=",")} participants to begin with")
pre_exclusion = nrow(trials)
trials = trials %>% filter(english == "Y")
print_exclusion_change("Non-Native English", nStart, pre_exclusion, nrow(trials))
library(tidyverse)
library(crayon)
library(glue)
print_exclusion_change <- function(title, start, pre_exclusion, post_exclusion) {
removed <- pre_exclusion - post_exclusion
percent_change <- round(-100 * removed / pre_exclusion, 2)
percent_total_change <- round(100 * (post_exclusion - start) / start, 2)
print(glue_col("{red {title}: {removed} ({percent_change}%) just removed\tNow: {post_exclusion} ppts ({percent_total_change}% decrease)}"))
}
# bot check correct answers
CHECK1_ANS = 1
CHECK2_ANS = 2
# minimum amount of time required on the stimulus
MINIMUM_TRIAL_RT = 5000 # in Milliseconds
trials <- read_csv("data/data_clean_pre15.csv", col_types = cols())
nrow(trials)
nStart <- nrow(trials)
glue("{format(nStart, big.mark=",")} participants to begin with")
pre_exclusion = nrow(trials)
trials = trials %>% filter(english == "Y")
print_exclusion_change("Non-Native English", nStart, pre_exclusion, nrow(trials))
pre_exclusion = nrow(trials)
trials = trials %>% filter(check1 == CHECK1_ANS & check2 == CHECK2_ANS)
print_exclusion_change("Failed 1+ bot check questions", nStart, pre_exclusion, nrow(trials))
pre_exclusion <- nrow(trials)
trials = trials %>% filter(rt_trial >= MINIMUM_TRIAL_RT)
print_exclusion_change("Minimum Trial RT", nStart, pre_exclusion, nrow(trials))
pre_exclusion <- nrow(trials)
trials$description = trimws(trials$description)
trials[is.na(trials$description), ]$description = ""
# remove all empty description responses
trials = trials %>% filter(description != "")
print_exclusion_change("Empty Description Responses", nStart, pre_exclusion, nrow(trials))
keywords = c("metaphor", "metaphors", "framing", "manipulate", "manipulates", "manipulated", "manipulating", "worded", "wording", "phrased", "phrasing", "measure", "measuring", "measured", "journey", "battle", "path", "fight", "road", "fighting", "fought")
purpose_flag = function(text) {
# lowercase
t = tolower(text)
# remove all punctuation and extra spacing from the text
t = gsub('[[:punct:] ]+', ' ', t)
# return a string of the keywords mentioned in the reponse
return(paste(intersect(keywords, strsplit(t, " ")[[1]]), collapse = ","))
}
# each participant now has a column with any keywords they mentioned
trials$purpose_flag = sapply(trials$purpose, purpose_flag)
trials %>%
filter(purpose_flag != "") %>%
select(ppt, purpose, purpose_flag) %>%
arrange(purpose_flag)
pre_exclusion <- nrow(trials)
exclude_ppts = c("hs3taunav6pcbu4uceap", "ogruj45dtbc6h2duxh90")
trials = trials %>% filter(!(ppt %in% exclude_ppts))
print_exclusion_change("Identified Manipulation", nStart, pre_exclusion, nrow(trials))
glue("{nrow(trials)} participants remaining")
glue("{nStart - nrow(trials)} participants removed in total")
glue("{round((nStart - nrow(trials)) / nStart,4)*100}% of original participants")
trials <- read_csv("../experimental/data/data_clean_excluded.csv", col_types = cols()) %>%
# remove outliers in past_donations and age which lie greater than 3 SDs away
# filter(past_donations < (mean(past_donations, na.rm = T) + 3*sd(past_donations, na.rm = T))) %>%
# filter(age < (mean(age, na.rm = T) + 3*sd(age, na.rm = T))) %>%
filter(age >= 18) %>%
# set the levels of the factors variables and rescale age and past_donations
mutate(
cond_sex = factor(cond_sex, levels = c("male", "female")),
cond_metaphor = factor(cond_metaphor, levels = c("literal", "battle", "journey")),
cond_anymet = cond_metaphor %in% c("battle", "journey"),
urgent = as.integer(urgent),
sympathy = as.integer(sympathy),
self_cancer = factor(self_cancer, levels = c("N", "Y", "OO")),
ff_cancer = factor(ff_cancer, levels = c("N", "Y", "OO")),
gender = factor(gender, levels = c("M", "F", "NB", "OO")),
education = factor(education, levels = c("<HS", "HS", "A", "B", "M", "P", "D", "OO")),
socioeconomic = factor(socioeconomic, levels = c("<10k", "10-25k", "25-50k", "50-75k", "75-100k", "100-150k", ">150k", "OO")),
rt_trial_group = factor(rt_trial_group, levels = c("[1.9,23]", "(23,42.7]", "(42.7,69.3]", "(69.3,4.25e+03]")),
congruency = ifelse((gender == "M" & cond_sex == "male") | (gender == "F" & cond_sex == "female"),
"congruent",
"incongruent")
)
trials <- read_csv("../experimental/data/data_clean_excluded.csv", col_types = cols()) %>%
# remove outliers in past_donations and age which lie greater than 3 SDs away
# filter(past_donations < (mean(past_donations, na.rm = T) + 3*sd(past_donations, na.rm = T))) %>%
# filter(age < (mean(age, na.rm = T) + 3*sd(age, na.rm = T))) %>%
# filter(age >= 18) %>%
# set the levels of the factors variables and rescale age and past_donations
mutate(
cond_sex = factor(cond_sex, levels = c("male", "female")),
cond_metaphor = factor(cond_metaphor, levels = c("literal", "battle", "journey")),
cond_anymet = cond_metaphor %in% c("battle", "journey"),
urgent = as.integer(urgent),
sympathy = as.integer(sympathy),
self_cancer = factor(self_cancer, levels = c("N", "Y", "OO")),
ff_cancer = factor(ff_cancer, levels = c("N", "Y", "OO")),
gender = factor(gender, levels = c("M", "F", "NB", "OO")),
education = factor(education, levels = c("<HS", "HS", "A", "B", "M", "P", "D", "OO")),
socioeconomic = factor(socioeconomic, levels = c("<10k", "10-25k", "25-50k", "50-75k", "75-100k", "100-150k", ">150k", "OO")),
rt_trial_group = factor(rt_trial_group, levels = c("[1.9,23]", "(23,42.7]", "(42.7,69.3]", "(69.3,4.25e+03]")),
congruency = ifelse((gender == "M" & cond_sex == "male") | (gender == "F" & cond_sex == "female"),
"congruent",
"incongruent")
)
# fill in missing values for past_donation and age with their means
trials <- trials %>%
replace_na(list(past_donations = mean(trials$past_donations, na.rm = T))) %>%
replace_na(list(age = mean(trials$age, na.rm = T)))
trials <- trials %>%
mutate(
age.z = (age - mean(age)) / (2 * sd(age)),
past_donations.z = (past_donations - mean(past_donations)) / (2 * sd(past_donations))
)
nrow(trials)
trials <- read_csv("data/data_clean_pre14.csv", col_types = cols())
nStart <- nrow(trials)
glue("{format(nStart, big.mark=",")} participants to begin with")
pre_exclusion = nrow(trials)
trials = trials %>% filter(english == "Y")
print_exclusion_change("Non-Native English", nStart, pre_exclusion, nrow(trials))
pre_exclusion = nrow(trials)
trials = trials %>% filter(check1 == CHECK1_ANS & check2 == CHECK2_ANS)
print_exclusion_change("Failed 1+ bot check questions", nStart, pre_exclusion, nrow(trials))
pre_exclusion <- nrow(trials)
trials = trials %>% filter(rt_trial >= MINIMUM_TRIAL_RT)
print_exclusion_change("Minimum Trial RT", nStart, pre_exclusion, nrow(trials))
pre_exclusion <- nrow(trials)
trials$description = trimws(trials$description)
trials[is.na(trials$description), ]$description = ""
# remove all empty description responses
trials = trials %>% filter(description != "")
print_exclusion_change("Empty Description Responses", nStart, pre_exclusion, nrow(trials))
keywords = c("metaphor", "metaphors", "framing", "manipulate", "manipulates", "manipulated", "manipulating", "worded", "wording", "phrased", "phrasing", "measure", "measuring", "measured", "journey", "battle", "path", "fight", "road", "fighting", "fought")
purpose_flag = function(text) {
# lowercase
t = tolower(text)
# remove all punctuation and extra spacing from the text
t = gsub('[[:punct:] ]+', ' ', t)
# return a string of the keywords mentioned in the reponse
return(paste(intersect(keywords, strsplit(t, " ")[[1]]), collapse = ","))
}
# each participant now has a column with any keywords they mentioned
trials$purpose_flag = sapply(trials$purpose, purpose_flag)
trials %>%
filter(purpose_flag != "") %>%
select(ppt, purpose, purpose_flag) %>%
arrange(purpose_flag)
pre_exclusion <- nrow(trials)
exclude_ppts = c("hs3taunav6pcbu4uceap", "ogruj45dtbc6h2duxh90")
trials = trials %>% filter(!(ppt %in% exclude_ppts))
print_exclusion_change("Identified Manipulation", nStart, pre_exclusion, nrow(trials))
glue("{nrow(trials)} participants remaining")
glue("{nStart - nrow(trials)} participants removed in total")
glue("{round((nStart - nrow(trials)) / nStart,4)*100}% of original participants")
